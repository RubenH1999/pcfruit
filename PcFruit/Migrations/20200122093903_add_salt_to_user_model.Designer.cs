// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PcFruit.Models;

namespace PcFruit.Migrations
{
    [DbContext(typeof(PcfruitContext))]
    [Migration("20200122093903_add_salt_to_user_model")]
    partial class add_salt_to_user_model
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PcFruit.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleID");

                    b.Property<DateTime>("TimeReceived");

                    b.Property<DateTime>("TimeRegistered");

                    b.HasKey("MeasurementID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("PcFruit.Models.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("PcFruit.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Analog");

                    b.Property<int?>("Distance");

                    b.Property<int?>("Humidity");

                    b.Property<string>("Label");

                    b.Property<int?>("MeasurementID");

                    b.Property<int>("Resistance");

                    b.Property<int?>("Temperature");

                    b.Property<int>("Type");

                    b.Property<int>("Voltage");

                    b.HasKey("SensorID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("metingen");
                });

            modelBuilder.Entity("PcFruit.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Naam");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<string>("Voornaam");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PcFruit.Models.Measurement", b =>
                {
                    b.HasOne("PcFruit.Models.Module", "Module")
                        .WithMany("Measurements")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PcFruit.Models.Sensor", b =>
                {
                    b.HasOne("PcFruit.Models.Measurement")
                        .WithMany("Sensors")
                        .HasForeignKey("MeasurementID");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PcFruit.Models;

namespace PcFruit.Migrations
{
    [DbContext(typeof(PcfruitContext))]
    [Migration("20200124092617_notification_fix")]
    partial class notification_fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PcFruit.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleID");

                    b.Property<DateTime>("TimeReceived");

                    b.Property<DateTime>("TimeRegistered");

                    b.HasKey("MeasurementID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("PcFruit.Models.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ModuleID");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("PcFruit.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NotificationSettingsID");

                    b.Property<int?>("NotificationSettingsID1");

                    b.Property<int>("RH");

                    b.Property<int>("Temp");

                    b.Property<int?>("UserID");

                    b.HasKey("NotificationID");

                    b.HasIndex("NotificationSettingsID1");

                    b.HasIndex("UserID");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("PcFruit.Models.NotificationSettings", b =>
                {
                    b.Property<int>("NotificationSettingsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("MaxRH");

                    b.Property<int>("MaxTemp");

                    b.Property<int>("MinRH");

                    b.Property<int>("MinTemp");

                    b.Property<int>("ModuleID");

                    b.Property<int>("NotificationID");

                    b.Property<int>("UserID");

                    b.HasKey("NotificationSettingsID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("UserID");

                    b.ToTable("notificationSettings");
                });

            modelBuilder.Entity("PcFruit.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Analog");

                    b.Property<int?>("Distance");

                    b.Property<int?>("Humidity");

                    b.Property<string>("Label");

                    b.Property<int?>("MeasurementID");

                    b.Property<int>("Resistance");

                    b.Property<int?>("Temperature");

                    b.Property<int>("Type");

                    b.Property<int>("Voltage");

                    b.HasKey("SensorID");

                    b.HasIndex("MeasurementID");

                    b.ToTable("sensors");
                });

            modelBuilder.Entity("PcFruit.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Naam");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Salt");

                    b.Property<string>("Voornaam");

                    b.Property<bool>("hasAccess");

                    b.HasKey("UserID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PcFruit.Models.Measurement", b =>
                {
                    b.HasOne("PcFruit.Models.Module", "Module")
                        .WithMany("Measurements")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PcFruit.Models.Notification", b =>
                {
                    b.HasOne("PcFruit.Models.NotificationSettings", "NotificationSettings")
                        .WithMany()
                        .HasForeignKey("NotificationSettingsID1");

                    b.HasOne("PcFruit.Models.User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("PcFruit.Models.NotificationSettings", b =>
                {
                    b.HasOne("PcFruit.Models.Module", "module")
                        .WithMany("Notifications")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PcFruit.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PcFruit.Models.Sensor", b =>
                {
                    b.HasOne("PcFruit.Models.Measurement")
                        .WithMany("Sensors")
                        .HasForeignKey("MeasurementID");
                });
#pragma warning restore 612, 618
        }
    }
}
